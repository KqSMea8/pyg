/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.47
 * Generated at: 2019-01-16 13:50:55 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("<html>\n");
      out.write("  <head>\n");
      out.write("    <title>Vue</title>\n");
      out.write("    <script src=\"js/vue.js\"></script>\n");
      out.write("  </head>\n");
      out.write("  <body>\n");
      out.write("\n");
      out.write("  <a href=\"vueJsp/demo1.jsp\">  01 入门-MVVM</a><br>\n");
      out.write("  <a href=\"vueJsp/demo2.jsp\">  02 v-cloak,v-text,v-html,v-on:click,v-on:mouseover,methods</a><br>\n");
      out.write("  <a href=\"vueJsp/demo3.jsp\">  03 跑马灯</a><br>\n");
      out.write("  <a href=\"vueJsp/demo4.jsp\">  04 修饰符</a><br>\n");
      out.write("  <a href=\"vueJsp/demo5.jsp\">  05 v-model双向绑定</a><br>\n");
      out.write("  <a href=\"vueJsp/demo6.jsp\">  06 简易计算器</a><br>\n");
      out.write("  <a href=\"vueJsp/demo7.jsp\">  07 Vue中样式-class</a><br>\n");
      out.write("  <a href=\"vueJsp/demo8.jsp\">  08 Vue中样式-style</a><br>\n");
      out.write("  <a href=\"vueJsp/demo9.jsp\">  09 v-for循环普通数组(相当于aj的ng-repeat)</a><br>\n");
      out.write("  <a href=\"vueJsp/demo10.jsp\"> 10 v-for循环对象数组</a><br>\n");
      out.write("  <a href=\"vueJsp/demo11.jsp\"> 11 v-for循环对象</a><br>\n");
      out.write("  <a href=\"vueJsp/demo12.jsp\"> 12 v-for迭代数字</a><br>\n");
      out.write("  <a href=\"vueJsp/demo13.jsp\"> 13 v-for循环中,key属性的使用</a><br>\n");
      out.write("  <a href=\"vueJsp/demo14.jsp\"> 14 v-if和v-show的使用</a><br>\n");
      out.write("  <a href=\"vueJsp/demo15.jsp\"> 15 第一天内容小结</a><br>\n");
      out.write("\n");
      out.write("  <a href=\"vueJsp/demo16.html\">16 品牌列表案例</a><br>\n");
      out.write("  <a href=\"vueJsp/demo17.html\">17 过滤器</a><br>\n");
      out.write("  <a href=\"vueJsp/demo18.html\">18 过滤器,时间格式,keyup事件,自定义键盘码,获取焦点和颜色设置等指令</a><br>\n");
      out.write("  <a href=\"vueJsp/demo19.html\">19 Vue实例的生命周期函数,创建挂在更新销毁8个</a><br>\n");
      out.write("  <a href=\"vueJsp/demo20.html\">20 vue-resource基本使用get,post,jsonp</a><br>\n");
      out.write("  <a href=\"vueJsp/demo21.html\">21 jsonp的原理,需要再百度看看</a><br>\n");
      out.write("\n");
      out.write("  <a href=\"vueJsp/demo22.html\">22 增删查数据库</a>    **************<br>\n");
      out.write("  <a href=\"vueJsp/demo23.html\">23 动画,不使用动画</a><br>\n");
      out.write("  <a href=\"vueJsp/demo24.html\">24 全场动画,使用过渡类名动画,transition元素 enter,leave</a><br>\n");
      out.write("  <a href=\"vueJsp/demo25.html\">25 全场动画,修改v-前缀 enter,leave</a><br>\n");
      out.write("  <a href=\"vueJsp/demo26.html\">26 全场动画,使用第三方类实现动画animate,入场离场时间时长等</a><br>\n");
      out.write("  <a href=\"vueJsp/demo27.html\">27 动画-使用钩子函数模拟小球半场动画</a><br>\n");
      out.write("  <a href=\"vueJsp/demo28.html\">28 动画-列表动画</a><br>\n");
      out.write("  ");
      out.write('\n');
      out.write(' ');
      out.write(' ');
      out.write("\n");
      out.write("  <a href=\"vueJsp/demo29.html\">29 创建组件的方式1</a><br>\n");
      out.write("  <a href=\"vueJsp/demo30.html\">30 创建组件的方式2</a><br>\n");
      out.write("  <a href=\"vueJsp/demo31.html\">31 创建组件的方式3</a><br>\n");
      out.write("  <a href=\"vueJsp/demo32.html\">32 组件中的data和methods</a><br>\n");
      out.write("  <a href=\"vueJsp/demo33.html\">33 Why components data must be a function,成员和局部变量</a><br>\n");
      out.write("  <a href=\"vueJsp/demo34.html\">34 组件切换-方式1</a><br>\n");
      out.write("  <a href=\"vueJsp/demo35.html\">35 组件切换-方式2  <component :is=\"\"></component></a><br>\n");
      out.write("  <a href=\"vueJsp/demo36.html\">36 组件切换-切换动画</a><br>\n");
      out.write("\n");
      out.write("  <a href=\"vueJsp/demo37.html\">37 复习-实现小球动画,加入购物车</a><br>\n");
      out.write("  <a href=\"vueJsp/demo38.html\">38 复习-定义组件的方式</a><br>\n");
      out.write("  <a href=\"vueJsp/demo39.html\">39 组件-父组件向子组件传值</a><br>\n");
      out.write("  <a href=\"vueJsp/demo40.html\">40 组件-父组件向子组件传方法</a><br>\n");
      out.write("  <a href=\"vueJsp/demo41.html\">41 组件案例-评论列表</a><br>\n");
      out.write("  <a href=\"vueJsp/demo42.html\">42 ref 获取DOM元素和组件</a><br>\n");
      out.write("  ");
      out.write("\n");
      out.write("  <a href=\"vueJsp/demo43.html\">43 路由的基本使用(注册登录和选中高亮),修改默认类名</a><br>\n");
      out.write("  <a href=\"vueJsp/demo44.html\">44 路由规则中定义参数</a><br>\n");
      out.write("  <a href=\"vueJsp/demo45.html\">45 路由规则传参方式2</a><br>\n");
      out.write("  <a href=\"vueJsp/demo46.html\">46 路由的嵌套</a><br>\n");
      out.write("  <a href=\"vueJsp/demo47.html\">47 路由-命名视图实现经典布局</a><br>\n");
      out.write("\n");
      out.write("\n");
      out.write("  <a href=\"vueJsp/demo48.html\">48 名称案例1 使用@keyup  methods</a><br>\n");
      out.write("  <a href=\"vueJsp/demo49.html\">49 名称案例2 watch</a><br>\n");
      out.write("  <a href=\"vueJsp/demo50.html\">50 watch 监视路由地址的改变</a><br>\n");
      out.write("  <a href=\"vueJsp/demo51.html\">51 名称案例3 computed</a><br>\n");
      out.write("  <a href=\"vueJsp/demo52.html\">52 watch,computed,methods对比(三种名称案例)</a><br>\n");
      out.write("  <a href=\"vueJsp/demo53.html\">53 nrm 工具的使用(npm,cnpm,taobao)</a><br>\n");
      out.write("  <a href=\"vueJsp/demo54.html\">54 webpack安装,案例</a><br>\n");
      out.write("\n");
      out.write("  <a href=\"vueJsp/demo55.html\">55 Ajax库,axios</a><br>\n");
      out.write("\n");
      out.write("  <a href=\"vueJsp/demo56.html\">56 在页面中使用render函数渲染组件</a><br>\n");
      out.write("\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
